/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package brn.mobile.brnmobile.api.apis

import brn.mobile.brnmobile.api.models.BaseResponseDto
import brn.mobile.brnmobile.api.models.BaseSingleObjectResponseDto
import brn.mobile.brnmobile.api.models.ExerciseCreateDto
import brn.mobile.brnmobile.api.models.SubGroupRequest
import brn.mobile.brnmobile.api.models.UpdateResourceDescriptionRequest

import brn.mobile.brnmobile.api.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.http.ParametersBuilder
import kotlinx.datetime.LocalDate

open class AdminControllerApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
) : ApiClient(
    baseUrl,
    httpClientEngine,
    httpClientConfig,
) {

    /**
     * Add new subgroup for existing series
     *
     * @param subGroupRequest subGroupRequest
     * @param seriesId ID of existed series (optional)
     * @return BaseSingleObjectResponseDto
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun addSubGroupToSeriesUsingPOST(
        subGroupRequest: SubGroupRequest,
        seriesId: kotlin.Long?
    ): HttpResponse<BaseSingleObjectResponseDto> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = subGroupRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        seriesId?.apply { localVariableQuery["seriesId"] = listOf("$seriesId") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/admin/subgroup",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Create new exercise for exist subgroup
     *
     * @param exerciseCreateDto Exercise data
     * @return BaseSingleObjectResponseDto
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun createExerciseUsingPOST(exerciseCreateDto: ExerciseCreateDto): HttpResponse<BaseSingleObjectResponseDto> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = exerciseCreateDto

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/admin/create/exercise",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Get exercises for subgroup with tasks
     *
     * @param subGroupId subGroupId
     * @return BaseResponseDto
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getExercisesBySubGroupUsingGET(subGroupId: kotlin.Long): HttpResponse<BaseResponseDto> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        subGroupId?.apply { localVariableQuery["subGroupId"] = listOf("$subGroupId") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/admin/exercises",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Get user&#39;s study histories for period from &lt;&#x3D; startTime &lt; to. Where period is a two dates in the format yyyy-MM-dd
     *
     * @param from from
     * @param to to
     * @param userId userId
     * @return BaseResponseDto
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getHistoriesUsingGET(
        from: LocalDate,
        to: LocalDate,
        userId: kotlin.Long
    ): HttpResponse<BaseResponseDto> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        from?.apply { localVariableQuery["from"] = listOf("$from") }
        to?.apply { localVariableQuery["to"] = listOf("$to") }
        userId?.apply { localVariableQuery["userId"] = listOf("$userId") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/admin/histories",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Get month user&#39;s study histories by month and year
     *
     * @param month month
     * @param userId userId
     * @param year year
     * @return BaseResponseDto
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getMonthHistoriesUsingGET(
        month: kotlin.Int,
        userId: kotlin.Long,
        year: kotlin.Int
    ): HttpResponse<BaseResponseDto> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        month?.apply { localVariableQuery["month"] = listOf("$month") }
        userId?.apply { localVariableQuery["userId"] = listOf("$userId") }
        year?.apply { localVariableQuery["year"] = listOf("$year") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/admin/monthHistories",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Get all roles
     *
     * @return BaseResponseDto
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getRolesUsingGET(): HttpResponse<BaseResponseDto> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/admin/roles",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Get user&#39;s weekly statistic for the period. Where period is a two dates in the format yyyy-MM-dd
     *
     * @param from from
     * @param to to
     * @param userId userId
     * @return BaseSingleObjectResponseDto
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getUserWeeklyStatisticUsingGET(
        from: LocalDate,
        to: LocalDate,
        userId: kotlin.Long
    ): HttpResponse<BaseSingleObjectResponseDto> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        from?.apply { localVariableQuery["from"] = listOf("$from") }
        to?.apply { localVariableQuery["to"] = listOf("$to") }
        userId?.apply { localVariableQuery["userId"] = listOf("$userId") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/admin/study/week",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Get user&#39;s yearly statistic for the period. Where period is a two dates in the format yyyy-MM-dd
     *
     * @param from from
     * @param to to
     * @param userId userId
     * @return BaseSingleObjectResponseDto
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getUserYearlyStatisticUsingGET(
        from: LocalDate,
        to: LocalDate,
        userId: kotlin.Long
    ): HttpResponse<BaseSingleObjectResponseDto> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        from?.apply { localVariableQuery["from"] = listOf("$from") }
        to?.apply { localVariableQuery["to"] = listOf("$to") }
        userId?.apply { localVariableQuery["userId"] = listOf("$userId") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/admin/study/year",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Get all users
     *
     * @param offset  (optional)
     * @param pageNumber  (optional)
     * @param pageSize  (optional)
     * @param paged  (optional)
     * @param role role (optional, default to "ROLE_USER")
     * @param sortSorted  (optional)
     * @param sortUnsorted  (optional)
     * @param unpaged  (optional)
     * @param withAnalytics withAnalytics (optional, default to false)
     * @return kotlin.Any
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getUsersUsingGET(
        offset: kotlin.Long?,
        pageNumber: kotlin.Int?,
        pageSize: kotlin.Int?,
        paged: kotlin.Boolean?,
        role: kotlin.String?,
        sortSorted: kotlin.Boolean?,
        sortUnsorted: kotlin.Boolean?,
        unpaged: kotlin.Boolean?,
        withAnalytics: kotlin.Boolean?
    ): HttpResponse<kotlin.Any> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        pageNumber?.apply { localVariableQuery["pageNumber"] = listOf("$pageNumber") }
        pageSize?.apply { localVariableQuery["pageSize"] = listOf("$pageSize") }
        paged?.apply { localVariableQuery["paged"] = listOf("$paged") }
        role?.apply { localVariableQuery["role"] = listOf("$role") }
        sortSorted?.apply { localVariableQuery["sort.sorted"] = listOf("$sortSorted") }
        sortUnsorted?.apply { localVariableQuery["sort.unsorted"] = listOf("$sortUnsorted") }
        unpaged?.apply { localVariableQuery["unpaged"] = listOf("$unpaged") }
        withAnalytics?.apply { localVariableQuery["withAnalytics"] = listOf("$withAnalytics") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/admin/users",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Load task file to series
     *
     * @param seriesId seriesId
     * @param taskFile taskFile
     * @return BaseResponseDto
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun loadExercisesUsingPOST(
        seriesId: kotlin.Long,
        taskFile: io.ktor.client.request.forms.InputProvider
    ): HttpResponse<BaseResponseDto> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            formData {
                taskFile?.apply { append("taskFile", taskFile) }
            }

        val localVariableQuery = mutableMapOf<String, List<String>>()
        seriesId?.apply { localVariableQuery["seriesId"] = listOf("$seriesId") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/admin/loadTasksFile",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return multipartFormRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * Update resource description by resource id
     *
     * @param id id
     * @param request request
     * @return BaseSingleObjectResponseDto
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun updateResourceDescriptionUsingPATCH(
        id: kotlin.Long,
        request: UpdateResourceDescriptionRequest
    ): HttpResponse<BaseSingleObjectResponseDto> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = request

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/admin/resources/{id}".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

}
