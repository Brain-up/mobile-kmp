/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package brn.mobile.brnmobile.api.apis

import brn.mobile.brnmobile.api.models.BaseResponseDto
import brn.mobile.brnmobile.api.models.BaseSingleObjectResponseDto
import brn.mobile.brnmobile.api.models.ExerciseRequest

import brn.mobile.brnmobile.api.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.http.ParametersBuilder

    open class ExerciseControllerApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    ) : ApiClient(
        baseUrl,
        httpClientEngine,
        httpClientConfig,
    ) {

        /**
        * Get exercise by id
        * 
         * @param exerciseId exerciseId 
         * @return BaseSingleObjectResponseDto
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getExercisesByIDUsingGET(exerciseId: kotlin.Long): HttpResponse<BaseSingleObjectResponseDto> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/exercises/{exerciseId}".replace("{" + "exerciseId" + "}", "$exerciseId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get available exercise ids for current user by input ids which have same subgroup
        * 
         * @param exerciseRequest exerciseRequest 
         * @return BaseResponseDto
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getExercisesByIdsUsingPOST(exerciseRequest: ExerciseRequest): HttpResponse<BaseResponseDto> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = exerciseRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/exercises/byIds",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get exercises for subgroup and current user with availability calculation
        * 
         * @param subGroupId subGroupId 
         * @return BaseResponseDto
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getExercisesBySubGroupUsingGET1(subGroupId: kotlin.Long): HttpResponse<BaseResponseDto> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            subGroupId?.apply { localVariableQuery["subGroupId"] = listOf("$subGroupId") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/exercises",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Update active status of the exercise
        * 
         * @param active active 
         * @param exerciseId exerciseId 
         * @return void
        */
        open suspend fun updateExerciseStatusUsingPUT(active: kotlin.Boolean, exerciseId: kotlin.Long): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/exercises/{exerciseId}/active/{active}".replace("{" + "active" + "}", "$active").replace("{" + "exerciseId" + "}", "$exerciseId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        }
