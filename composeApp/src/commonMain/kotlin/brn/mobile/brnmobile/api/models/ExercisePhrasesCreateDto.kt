/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package brn.mobile.brnmobile.api.models

import brn.mobile.brnmobile.api.models.ExerciseCreateDto
import brn.mobile.brnmobile.api.models.Phrases

import kotlinx.serialization.json.JsonNames


/**
 * Request dto for create exercise 'phrases'
 *
 * @param exerciseName Exercise name
 * @param level Level
 * @param locale Locale
 * @param subGroup Subgroup code
 * @param typeOfExercise type of exercise
 * @param noiseLevel noise level
 * @param phrases
 * @param noiseUrl noise url
 */


data class ExercisePhrasesCreateDto(

    /* Exercise name */
    @JsonNames("exerciseName")
    override val exerciseName: kotlin.String,

    /* Level */
    @JsonNames("level")
    override val level: kotlin.Int,

    /* Locale */
    @JsonNames("locale")
    override val locale: ExerciseCreateDto.Locale,

    /* Subgroup code */
    @JsonNames("subGroup")
    override val subGroup: kotlin.String,

    /* type of exercise */
    @JsonNames("typeOfExercise")
    override val typeOfExercise: ExerciseCreateDto.TypeOfExercise,

    /* noise level */
    @JsonNames("noiseLevel")
    val noiseLevel: kotlin.Int,

    @JsonNames("phrases")
    val phrases: Phrases,

    /* noise url */
    @JsonNames("noiseUrl")
    val noiseUrl: kotlin.String? = null

) : ExerciseCreateDto {

    /**
     * Locale
     *
     * Values: RU,EN,TR
     */

    enum class Locale(val value: kotlin.String) {
        @JsonNames("RU")
        RU("RU"),
        @JsonNames("EN")
        EN("EN"),
        @JsonNames("TR")
        TR("TR");
    }

    /**
     * type of exercise
     *
     * Values: SINGLE_SIMPLE_WORDS,PHRASES,SENTENCE
     */

    enum class TypeOfExercise(val value: kotlin.String) {
        @JsonNames("SINGLE_SIMPLE_WORDS")
        SINGLE_SIMPLE_WORDS("SINGLE_SIMPLE_WORDS"),
        @JsonNames("PHRASES")
        PHRASES("PHRASES"),
        @JsonNames("SENTENCE")
        SENTENCE("SENTENCE");
    }

}


data class Phrases(
    val shortPhrase: String,
    val longPhrase: String
) {
    fun toList(): List<String> = listOf(shortPhrase, longPhrase)
    fun toListWithDot(): List<String> = listOf(shortPhrase.plus("."), longPhrase)
}