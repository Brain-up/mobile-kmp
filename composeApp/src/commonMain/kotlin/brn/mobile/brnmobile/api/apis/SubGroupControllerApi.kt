/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package brn.mobile.brnmobile.api.apis

import brn.mobile.brnmobile.api.models.BaseResponseDto
import brn.mobile.brnmobile.api.models.BaseSingleObjectResponseDto

import brn.mobile.brnmobile.api.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.http.ParametersBuilder

    open class SubGroupControllerApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    ) : ApiClient(
        baseUrl,
        httpClientEngine,
        httpClientConfig,
    ) {

        /**
        * Delete subgroup by id without exercises
        * 
         * @param subGroupId subGroupId 
         * @return BaseSingleObjectResponseDto
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun deleteSubGroupByIdUsingDELETE(subGroupId: kotlin.Long): HttpResponse<BaseSingleObjectResponseDto> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/subgroups/{subGroupId}".replace("{" + "subGroupId" + "}", "$subGroupId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get subgroups for series
        * 
         * @param seriesId seriesId 
         * @return BaseResponseDto
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getAllGroupsUsingGET(seriesId: kotlin.Long): HttpResponse<BaseResponseDto> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            seriesId?.apply { localVariableQuery["seriesId"] = listOf("$seriesId") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/subgroups",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get subgroup for id
        * 
         * @param subGroupId subGroupId 
         * @return BaseSingleObjectResponseDto
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getSeriesForIdUsingGET1(subGroupId: kotlin.Long): HttpResponse<BaseSingleObjectResponseDto> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/subgroups/{subGroupId}".replace("{" + "subGroupId" + "}", "$subGroupId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        }
